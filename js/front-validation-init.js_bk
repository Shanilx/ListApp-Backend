var Script = function () {

    /*$.validator.setDefaults({
        submitHandler: function() { alert("submitted!"); }
    });*/

    $().ready(function() {

        //common validation messages
        var uname_msg = "Please enter name";
        var uname_valid_msg = "Please enter valid name";
        var uname_min_msg = "Please enter at least 30 characters";
        var uname_max_msg = "Please enter no more than 40 characters";

        var fname_msg = "Please enter first name";
        var fname_valid_msg = "Please enter valid first name";
        var fname_min_msg = "Please enter at least 3 characters";
        var fname_max_msg = "Please enter no more than 20 characters";

        var lname_msg = "Please enter last name";
        var lname_valid_msg = "Please enter valid last name";
        var lname_min_msg = "Please enter at least 3 characters";
        var lname_max_msg = "Please enter no more than 20 characters";

        var medical_license_no_msg = "Please enter medical license number";

        var email_msg = "Please enter email id";
        var email_valid_msg = "Please enter valid email id";
        var email_remote_msg = "This email id already exists";

        var mobile_msg = "Please enter mobile number";
        var mobile_valid_msg = "Please enter valid mobile number";
        var mobile_min_msg = "Please enter at least 8 digits";
        var mobile_max_msg = "Please enter no more than 15 digits";

        var gender_msg = "Please select gender";
        var language_msg = "Please select language";

        var alt_mobile_msg = "Please enter alternate mobile number";
        var alt_mobile_valid_msg = "Please enter valid alternate mobile number";

        var zip_msg = "Please enter zipcode";
        var zip_valid_msg = "Please enter valid zipcode";
        var zip_min_msg = "Please enter at least 4 characters";
        var zip_max_msg = "Please enter no more than 7 characters";
        
        var password_msg = "Please enter password";
        var con_password_msg = "Please enter confirm password";
        var pass_mismatch = "Password and confirm password do no match";
        var password_min_msg = "Please enter at least 6 characters";
        var password_max_msg = "Please enter no more than 15 characters";

        var address_msg = "Please enter address";
        var address_min_msg = "Please enter at least 8 characters";
        var address_max_msg = "Please enter no more than 300 characters";

        var landmark_msg = "Please enter residency";
        var landmark_min_msg = "Please enter at least 8 characters";
        var landmark_max_msg = "Please enter no more than 300 characters";

        var school_msg = "Please enter school/collage name";

        var university_msg = "Please enter university name";

        var qualification_msg = "Please enter qualification";

        var specialization_msg = "Please enter specialization";

        var country_msg = "Please select country";

        var state_msg = "Please select state";

        var city_msg = "Please select city";

        var dob_msg = "Please enter DOB";

        var userfile_msg = "Please select only jpeg, jpg or png";

        var list_of_experiences_msg = "Please enter list of experiences";

        
        jQuery.validator.addMethod("lettersonly", function(value, element) 
        {
            return this.optional(element) || /^[a-zA-Z]+$/i.test(value);
        }, "Letters only please");

        jQuery.validator.addMethod("lettersonlynspace", function(value, element) 
        {
            return this.optional(element) || /^[a-zA-Z ]+$/i.test(value);
        }, "Letters only please"); 

        jQuery.validator.addMethod("lettersndigitsnspace", function(value, element) 
        {
            return this.optional(element) || /^[a-zA-Z0-9 ]+$/i.test(value);
        }, "Only letters, digits and spaces are allowed");

        jQuery.validator.addMethod("alphaNumeric", function (value, element) {
        return this.optional(element) || /^[a-zA-Z0-9!@#$%^&*()_=\[\]{};:"\\|,.<>\/?+-]+$/.test(value);
    }, "password must contain atleast one number and one character and  special characters"); 
    
        $.validator.addMethod("pwcheckspechars", function (value) {
            return /[!@#$%^&*()_=\[\]{};:"\\|,.<>\/?+-]/.test(value)
        }, "The password must contain at least one special character");
        
         $.validator.addMethod("pwchecknumber", function (value) {
            return /\d/.test(value) // has a digit
        }, "The password must contain at least one number");
        
        $.validator.addMethod("pwchecklowercase", function (value) {
            return /[a-zA-Z]/.test(value) // has a lowercase letter
        }, "The password must contain at least one letter");


        //Login page for user
        $("#signin_user").validate({ 
            rules: {
            
                email: { 
                    required: true,
                    email: true,
              },
               password: { 
                    required: true,
              },
                
            },
             messages: {
                        
                        email: {
                            required:email_msg,
                            email:email_valid_msg
                        },
                        password: password_msg,
                        },
         });

        //forgot pwd page for user
        $("#forgot_pwd_form").validate({ 
            rules: {
            
                forgot_email: { 
                    required: true,
                    email: true,
              },
            },
            messages: {
                        
                        forgot_email: {
                            required:email_msg,
                            email:email_valid_msg,
                        },
                    },
         });

        //type email for social login/signup page for patient
        $("#typeemail_form").validate({ 
            rules: {
            
                email: { 
                    required: true,
                    email: true,
              },
            },
             messages: {
                        
                        email: {
                            required:email_msg,
                            email:email_valid_msg
                        },
                    },
         });

        //Login page for user
        $("#reset_pwd").validate({ 
            rules: {
                password: { 
                    required: true,
                    minlength : 6,
                    maxlength : 15,
                    pwchecknumber : true,
                    pwchecklowercase : true,
              },
                con_password: { 
                    required: true,
                    equalTo : "#password",
              },
                
            },
             messages: {
                        
                        password: { 
                            required: password_msg, 
                        },
                        con_password: { 
                            required: con_password_msg, minlength: password_min_msg,
                            maxlength: password_max_msg, equalTo: pass_mismatch,  
                        },

                },
                        
         });

        // validate addPatient form on keyup and submit (Patient Page)
        $("#addPatientForm").validate({
            rules: {
                first_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                last_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                email: {
                    required: true,
                    email: true,

                },
                DOB: {
                    required: true,
                },
                gender: {
                    required: true,
                },
                language: {
                    required: true,
                },
                phone: {
                    required: true,
                    minlength : 8,
                    maxlength : 15,
                    digits : true,
                },
                alternate_no: {
                    required: true,
                    minlength : 8,
                    maxlength : 15,
                    digits : true,
                },
                country: {
                    required: true,
                    
                },
                state: {
                    required: true,
                },
                city: {
                    required: true,

                },
                 zipcode: {
                    required: true,
                    lettersndigitsnspace: true,
                    //digits: true,
                    minlength : 4,
                    maxlength : 7,

                },
                 address: {
                    required: true,
                    minlength : 8,
                    maxlength : 300,
                },
                 landmark: {
                    required: true,
                    minlength : 8,
                    maxlength : 300,
                },
                 password: {
                    required: true,
                    minlength : 6,
                    maxlength : 15,
                    pwchecknumber : true,
                    pwchecklowercase : true,    

                },
                 cpassword: {
                    required: true,
                    minlength : 6,
                    maxlength : 15,
                    equalTo : "#password"

                },
                userfile: {
                    accept: "image/jpg,image/jpeg,image/png,image/gif,image/bmp",
                },
                
                
            },
            messages: {
                
                first_name: {
                    required: fname_msg,
                    lettersonly: fname_valid_msg,
                    maxlength: fname_max_msg,
                },
                last_name: {
                    required: lname_msg,
                    lettersonly: lname_valid_msg,
                    maxlength: lname_max_msg,
                },
                email: {
                    required: email_msg,
                    email: email_valid_msg,
                },
                 DOB: {
                    required: dob_msg,
                },
                gender: {
                   required: gender_msg,
                },
                language: {
                   required: language_msg,
                },
                phone: {
                    required: mobile_msg,
                    digits: mobile_valid_msg,
                    minlength: mobile_min_msg,
                    maxlength: mobile_max_msg,
                },
                alternate_no: {
                    required: alt_mobile_msg,
                    digits: alt_mobile_valid_msg,
                    minlength: mobile_min_msg,
                    maxlength: mobile_max_msg,
                },
                country: {
                    required: country_msg,
                    
                },
                state: {
                   required: state_msg,
                },
                city: {
                   required: city_msg,

                },
                 zipcode: {
                   required: zip_msg,
                   //digits: zip_valid_msg,
                   minlength: zip_min_msg,
                   maxlength: zip_max_msg,
                },
                 address: {
                   required: address_msg,
                   minlength: address_min_msg,
                   maxlength: address_max_msg,
                },
                 landmark: {
                   required: landmark_msg,
                   minlength: landmark_min_msg,
                   maxlength: landmark_max_msg,
                },
                 password: {
                   required: password_msg,
                   minlength: password_min_msg,
                   maxlength: password_max_msg,
                },
                 cpassword: {
                   required: con_password_msg,
                   equalTo: pass_mismatch,
                },
                userfile: {
                            accept: userfile_msg,
                },
            }
        });

         //Edit doctor form
        $('#editDoctorForm').formValidation({
        framework: 'bootstrap',
        // icon: {
        //     valid: 'glyphicon glyphicon-ok',
        //     invalid: 'glyphicon glyphicon-remove',
        //     validating: 'glyphicon glyphicon-refresh'
        // },
        fields: {
            'first_name': {
                validators: {
                    notEmpty: {
                        message: fname_msg
                    },
                    regexp: {
                        regexp: /^[a-zA-Z]{3,20}$/,
                        message: fname_valid_msg
                    }
                }
            },
            'last_name': {
                validators: {
                    notEmpty: {
                        message: lname_msg
                    },
                    regexp: {
                        regexp: /^[a-zA-Z]{3,20}$/,
                        message: lname_valid_msg
                    }
                }
            },
            'medical_license_no': {
                validators: {
                    notEmpty: {
                        message: medical_license_no_msg
                    },
               }
            },
             'email': {
                validators: {
                    notEmpty: {
                        message: email_msg
                    },
                    emailAddress: {
                        message: email_valid_msg
                    }
                }
            },
            
            'DOB': {
                validators: {
                    notEmpty: {
                        message: dob_msg
                    }
                }
            },
            'specialization': {
                validators: {
                    notEmpty: {
                        message: specialization_msg
                    }
                }
            },
            'qualification': {
                validators: {
                    notEmpty: {
                        message: qualification_msg
                    }
                }
            },
            'scl_clz': {
                validators: {
                    notEmpty: {
                        message: school_msg
                    }
                }
            },
            'university': {
                validators: {
                    notEmpty: {
                        message: university_msg
                    }
                }
            },
            'gender': {
                validators: {
                    notEmpty: {
                        message: gender_msg
                    }
                }
            },
            'language': {
                validators: {
                    notEmpty: {
                        message: language_msg
                    }
                }
            },
            'list_of_experiences': {
                validators: {
                    notEmpty: {
                        message: list_of_experiences_msg
                    }
                }
            },
            'phone': {
                validators: {
                    notEmpty: {
                        message: mobile_msg
                    },
                    regexp: {
                        regexp: /^[0-9]{8,15}$/,
                        message: mobile_valid_msg
                    }
                }
            },
            'alternate_no': {
                validators: {
                    notEmpty: {
                        message: alt_mobile_msg
                    },
                    regexp: {
                        regexp: /^[0-9]{8,15}$/,
                        message: alt_mobile_valid_msg
                    }
                }
            },
            'country[]': {
                validators: {
                    notEmpty: {
                        message: country_msg
                    }
                }
            },
            'city[]': {
                validators: {
                    notEmpty: {
                        message: city_msg
                    }
                }
            },
            'state[]': {
                validators: {
                    notEmpty: {
                        message: state_msg
                    }
                }
            },
            'zipcode[]': {
                validators: {
                    notEmpty: {
                        message: zip_msg
                    },
                    regexp: {
                        regexp: /^[0-9a-zA-Z ]{4,7}$/,
                        message: zip_valid_msg
                    }
                }
            },
            'address[]': {
                validators: {
                    notEmpty: {
                        message: address_msg
                    },
                    regexp: {
                        regexp: /^[a-zA-Z0-9 !@#$%^&*()_=\[\]{};:"\\|,.<>\/?+-]{8,300}$/,
                        message: address_max_msg
                    }
                }
            },
            'landmark[]': {
                validators: {
                    notEmpty: {
                        message: landmark_msg
                    },
                    regexp: {
                        regexp: /^[a-zA-Z0-9 !@#$%^&*()_=\[\]{};:"\\|,.<>\/?+-]{8,300}$/,
                        message: landmark_max_msg
                    }
                }
            },
            'userfile': {
                validators: {
                    
                    file: {
                        extension: 'jpeg,jpg,png',
                        type: 'image/jpeg,image/png',
                        maxSize: 2097152,   // 2048 * 1024
                        message: userfile_msg
                    }
                }
            },
            'identity_file': {
                validators: {
                    
                    file: {
                        extension: 'jpeg,jpg,png,pdf',
                        type: 'image/jpeg,image/png,application/pdf',
                        maxSize: 2097152,   // 2048 * 1024
                        message: userfile_msg
                    }
                }
            },
            'board_cert_file': {
                validators: {
                    
                    file: {
                        extension: 'jpeg,jpg,png,pdf',
                        type: 'image/jpeg,image/png,application/pdf',
                        maxSize: 2097152,   // 2048 * 1024
                        message: userfile_msg
                    }
                }
            },
            'drivers_lic_file': {
                validators: {
                    
                    file: {
                        extension: 'jpeg,jpg,png,pdf',
                        type: 'image/jpeg,image/png,application/pdf',
                        maxSize: 2097152,   // 2048 * 1024
                        message: userfile_msg
                    }
                }
            },
            'liability_ins_file': {
                validators: {
                    
                    file: {
                        extension: 'jpeg,jpg,png,pdf',
                        type: 'image/jpeg,image/png,application/pdf',
                        maxSize: 2097152,   // 2048 * 1024
                        message: userfile_msg
                    }
                }
            },
                             
        }
    }).on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="country[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="country[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
        .on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="state[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="state[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
        .on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="city[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="city[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
        .on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="zipcode[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="zipcode[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
        .on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="address[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="address[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
         .on('click', '.add_button', function() {
            $option   = $('.new_fields').find('[name="landmark[]"]');
            $('#editDoctorForm').formValidation('addField', $option);
        })
      
        .on('click', '.removeButton', function() {
            $option   = $('.new_fields').find('[name="landmark[]"]');
            $('#editDoctorForm').formValidation('removeField', $option);
        })
        .on('err.field.fv', function(e, data) {
            if (data.fv.getSubmitButton()) {
                data.fv.disableSubmitButtons(false);
            }
        })
        .on('success.field.fv', function(e, data) {
            if (data.fv.getSubmitButton()) {
                data.fv.disableSubmitButtons(false);
            }
        }); 


        //validating landing home page
        /*$("#landing_home").validate({
            rules: {
                first_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                last_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                email: {
                    required: true,
                    email: true,
                    remote: {
                    url: check_user_email,
                    type: "post",
                    data: {
                      email: function() {
                        return $( "#email" ).val();
                      }
                    }
                  },

                },
                mobile: {
                    required: true,
                    digits: true,
                    minlength : 8,
                    maxlength : 15,
                },
            },
            messages: {
                
                first_name: {
                            required: fname_msg,
                            lettersonly: fname_valid_msg,
                            maxlength : fname_max_msg,
                },
                last_name: {
                            required: lname_msg,
                            lettersonly: lname_valid_msg,
                            maxlength : lname_max_msg,
                },
                email: {
                            required: email_msg,
                            email: email_valid_msg,
                            remote: email_remote_msg,
                },
                mobile: {
                            required: mobile_msg,
                            digits: mobile_valid_msg,
                            minlength: mobile_min_msg,
                            maxlength: mobile_max_msg,
                },
            },

        });*/

        
        // validate signup form on keyup and submit (Profile Page)
        $("#signup_user").validate({
            rules: {
                first_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                last_name: {
                    required: true,
                    lettersonly: true,
                    maxlength : 20,
                },
                email: {
                    required: true,
                    email: true,
                    remote: {
                    url: check_user_email,
                    type: "post",
                    data: {
                      email: function() {
                        return $( "#email" ).val();
                      }
                    }
                  },

                },
                mobile: {
                    required: true,
                    digits: true,
                    minlength : 8,
                    maxlength : 15,
                },
                password: {
                    required: true,
                    minlength : 6,
                    maxlength : 15,
                    pwchecknumber : true,
                    pwchecklowercase : true,

                },
            },
            messages: {
                
                first_name: {
                            required: fname_msg,
                            lettersonly: fname_valid_msg,
                            maxlength : fname_max_msg,
                },
                last_name: {
                            required: lname_msg,
                            lettersonly: lname_valid_msg,
                            maxlength : lname_max_msg,
                },
                email: {
                            required: email_msg,
                            email: email_valid_msg,
                            remote: email_remote_msg,
                },
                mobile: {
                            required: mobile_msg,
                            digits: mobile_valid_msg,
                            minlength: mobile_min_msg,
                            maxlength: mobile_max_msg,
                },
                password: {
                            required: password_msg,
                            minlength: password_min_msg,
                            maxlength: password_max_msg,
                },
            },

            /*errorPlacement: function(error, element) {
                element.attr("placeholder", error.text());
            }

            errorPlacement : function(error, element) {
                error.insertAfter(element);
            }*/

           /* errorPlacement: function(error, element) 
            {
                //alert(error.text());
                 if (error.text()=='Please enter name' || error.text()=='Please enter email' || error.text()=='Please enter mobile number' || error.text()=='Please enter password') 
                 {
                     
                     element.attr("placeholder", error.text());
                 } 
                 else
                 {
                     error.insertAfter(element);
                 }

                 // if(element.attr('name') == 'uname')
                 // {
                 //    element.attr("placeholder", error.text());
                 // }
            }*/

        });

       
    });


}();


$(document).ready(function(){

     //Disable cut copy paste
    $('#password').bind('cut copy paste', function (e) {
        e.preventDefault();
    });
   
    //Disable mouse right click
    $("#password").on("contextmenu",function(e){
        return false;
    });

    //Disable cut copy paste
    $('#con_password').bind('cut copy paste', function (e) {
        e.preventDefault();
    });
   
    //Disable mouse right click
    $("#con_password").on("contextmenu",function(e){
        return false;
    });

    $( function() {
    $( "#date_of_birth1" ).datepicker({
        'changeMonth':true,
        'changeYear' : true,
        'dateFormat' : 'mm-dd-yy',
        //'minDate': new Date(1930, 1 - 1, 1),
        //'maxDate': new Date(2016, 1 - 1, 1),
        maxDate: 0,
        yearRange: "-100:+0",
    });
  });
    
    //Call the country dropdown on load
    $("#country").change();
});


//Check Unique Email
function check_email()
{   
    //alert('called');
    $.ajax({
         type: "POST", 
         url: check_emailVal,
         data: {email_id:$("#email").val()},
         success: function(data) {
            if(data==1)
            {
                document.getElementById('email_error').style.display = 'block';  
                document.getElementById('hide_txt').value = '1';  
            }
            else
            {
                document.getElementById('email_error').style.display = 'none';  
                document.getElementById('hide_txt').value = '0';  
            }
         }
     });
}

//Country state and city checks
//$(function() {

    $("#country").change( function() {
        //Blank the value for state dropdown
        var state = document.getElementById('state');
        for(var i=state.options.length-1;i>=0;i--)
        {
            state.remove(i);
        }

        //Blank the value for city dropdown
        var city = document.getElementById('city');
        for(var i=city.options.length-1;i>=0;i--)
        {
            city.remove(i);
        }
         
         //To change state dropdown
         $.ajax({
             type: "POST", 
             url: get_state,
             data: {country_id:$("#country").val(), hide_state:$("#hide_state").val()},
             success: function(html) {
                 //alert('stateid = '+html);
                 $("#state").html(html);

                //To change city dropdown        
                 $("#state").change();
             }
         });
         
     }); 

     //To change city dropdown   
    $("#state").change( function() {

        //Blank the value for city dropdown
        var city = document.getElementById('city');
        for(var i=city.options.length-1;i>=0;i--)
        {
            city.remove(i);
        }


        //To change city dropdown
         $.ajax({
             type: "POST", 
             url: get_city,
             data: {state_id:$("#state").val(), hide_city:$("#hide_city").val()},
             success: function(html) {
                //alert(html);
                $("#city").html(html);
             }
         });

    });

    //Form validation for petient form
function validatePatientForm()
{
    if(document.myForm.hide_txt.value=="1")
    {
        document.getElementById('email_error').style.display = 'block';  
        return(false);  
    }
    else
    {
        document.getElementById('email_error').style.display = 'none'; 
    }

}


function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(showPosition);
    } else { 
        alert("Geolocation is not supported by this browser.");
    }
}

function showPosition(position) {
    var lat = position.coords.latitude;
    var long = position.coords.longitude;
    $.ajax({
         type: "POST", 
         url: set_cook_url,
         data: {latitude: lat, longitude: long},
         success: function(res) {
           console.log(res);
         }
     });
}

//----Image related checks------------
function readURL(input,item) 
{   
   if (input.files[0]) {   
            document.getElementById('blah').style.display = "block";
            //document.getElementById('blah9').style.display = "none";
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
}

function readIdentityURL(input,item) 
{   
    var ext = $("#identity_file").val().split('.').pop();
    if(ext == 'pdf')
    {
        document.getElementById('blah_identity_pdf').style.display = "block";
        document.getElementById('blah_identity').style.display = "none";
    }
    else
    {
        document.getElementById('blah_identity_pdf').style.display = "none";
        document.getElementById('blah_identity').style.display = "block";
    }

     if (input.files[0]) {   
            //document.getElementById('blah_identity').style.display = "block";
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah_identity')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    
}

function readboard_certURL(input,item) 
{   
    var ext = $("#board_cert_file").val().split('.').pop();
    if(ext == 'pdf')
    {
        document.getElementById('blah_board_cert_pdf').style.display = "block";
        document.getElementById('blah_board_cert').style.display = "none";
    }
    else
    {
        document.getElementById('blah_board_cert_pdf').style.display = "none";
        document.getElementById('blah_board_cert').style.display = "block";
    }
   if (input.files[0]) {   
            //document.getElementById('blah_board_cert').style.display = "block";
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah_board_cert')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
}

function readdrivers_licURL(input,item) 
{   
    var ext = $("#drivers_lic_file").val().split('.').pop();
    if(ext == 'pdf')
    {
        document.getElementById('blah_drivers_lic_pdf').style.display = "block";
        document.getElementById('blah_drivers_lic').style.display = "none";
    }
    else
    {
        document.getElementById('blah_drivers_lic_pdf').style.display = "none";
        document.getElementById('blah_drivers_lic').style.display = "block";
    }
   if (input.files[0]) {   
            //document.getElementById('blah_drivers_lic').style.display = "block";
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah_drivers_lic')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
}

function readliability_insURL(input,item) 
{   
    var ext = $("#liability_ins_file").val().split('.').pop();
    if(ext == 'pdf')
    {
        document.getElementById('blah_liability_ins_pdf').style.display = "block";
        document.getElementById('blah_liability_ins').style.display = "none";
    }
    else
    {
        document.getElementById('blah_liability_ins_pdf').style.display = "none";
        document.getElementById('blah_liability_ins').style.display = "block";
    }
   if (input.files[0]) {   
            //document.getElementById('blah_liability_ins').style.display = "block";
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#blah_liability_ins')
                    .attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
}